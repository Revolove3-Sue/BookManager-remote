<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rabbiter.bms.mapper.BookInfoMapper">
  <resultMap id="BaseResultMap" type="com.rabbiter.bms.model.BookInfo">
    <id column="bookId" jdbcType="INTEGER" property="bookId" />
    <result column="bookName" jdbcType="VARCHAR" property="bookName" />
    <result column="bookAuthor" jdbcType="VARCHAR" property="bookAuthor" />
    <result column="bookPrice" jdbcType="DECIMAL" property="bookPrice" />
    <result column="bookTypeId" jdbcType="INTEGER" property="bookTypeId" />
    <result column="bookTypeName" jdbcType="INTEGER" property="bookTypeName" />
    <result column="bookDesc" jdbcType="VARCHAR" property="bookDesc" />
    <result column="isBorrowed" jdbcType="TINYINT" property="isBorrowed" />
    <result column="bookImg" jdbcType="TINYINT" property="bookImg" />
  </resultMap>
  <sql id="Base_Column_List">
    bookId, bookName, bookAuthor, bookPrice, bookTypeId, bookDesc, isBorrowed, bookImg
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from book_info
    where bookId = #{bookId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from book_info
    where bookId = #{bookId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.rabbiter.bms.model.BookInfo">
    insert into book_info (bookId, bookName, bookAuthor, 
      bookPrice, bookTypeId, bookDesc, 
      isBorrowed, bookImg)
    values (#{bookId,jdbcType=INTEGER}, #{bookName,jdbcType=VARCHAR}, #{bookAuthor,jdbcType=VARCHAR}, 
      #{bookPrice,jdbcType=DECIMAL}, #{bookTypeId,jdbcType=INTEGER}, #{bookDesc,jdbcType=VARCHAR}, 
      #{isBorrowed,jdbcType=TINYINT}, #{bookImg,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.rabbiter.bms.model.BookInfo">
    insert into book_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="bookId != null">
        bookId,
      </if>
      <if test="bookName != null">
        bookName,
      </if>
      <if test="bookAuthor != null">
        bookAuthor,
      </if>
      <if test="bookPrice != null">
        bookPrice,
      </if>
      <if test="bookTypeId != null">
        bookTypeId,
      </if>
      <if test="bookDesc != null">
        bookDesc,
      </if>
      <if test="isBorrowed != null">
        isBorrowed,
      </if>
      <if test="bookImg != null">
        bookImg,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="bookId != null">
        #{bookId,jdbcType=INTEGER},
      </if>
      <if test="bookName != null">
        #{bookName,jdbcType=VARCHAR},
      </if>
      <if test="bookAuthor != null">
        #{bookAuthor,jdbcType=VARCHAR},
      </if>
      <if test="bookPrice != null">
        #{bookPrice,jdbcType=DECIMAL},
      </if>
      <if test="bookTypeId != null">
        #{bookTypeId,jdbcType=INTEGER},
      </if>
      <if test="bookDesc != null">
        #{bookDesc,jdbcType=VARCHAR},
      </if>
      <if test="isBorrowed != null">
        #{isBorrowed,jdbcType=TINYINT},
      </if>
      <if test="bookImg != null">
        #{bookImg,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.rabbiter.bms.model.BookInfo">
    update book_info
    <set>
      <if test="bookName != null">
        bookName = #{bookName,jdbcType=VARCHAR},
      </if>
      <if test="bookAuthor != null">
        bookAuthor = #{bookAuthor,jdbcType=VARCHAR},
      </if>
      <if test="bookPrice != null">
        bookPrice = #{bookPrice,jdbcType=DECIMAL},
      </if>
      <if test="bookTypeId != null">
        bookTypeId = #{bookTypeId,jdbcType=INTEGER},
      </if>
      <if test="bookDesc != null">
        bookDesc = #{bookDesc,jdbcType=VARCHAR},
      </if>
      <if test="isBorrowed != null">
        isBorrowed = #{isBorrowed,jdbcType=TINYINT},
      </if>
      <if test="bookImg != null">
        bookImg = #{bookImg,jdbcType=TINYINT},
      </if>
    </set>
    where bookId = #{bookId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.rabbiter.bms.model.BookInfo">
    update book_info
    set bookName = #{bookName,jdbcType=VARCHAR},
      bookAuthor = #{bookAuthor,jdbcType=VARCHAR},
      bookPrice = #{bookPrice,jdbcType=DECIMAL},
      bookTypeId = #{bookTypeId,jdbcType=INTEGER},
      bookDesc = #{bookDesc,jdbcType=VARCHAR},
      isBorrowed = #{isBorrowed,jdbcType=TINYINT},
      bookImg = #{bookImg,jdbcType=TINYINT}
    where bookId = #{bookId,jdbcType=INTEGER}
  </update>
  <select id="selectAllByLimit" resultMap="BaseResultMap">
    select bookId, bookName, bookAuthor,bookPrice, bookTypeId, bookDesc,isBorrowed, bookImg,
           (select bookTypeName from book_type where book_type.bookTypeId = book_info.bookTypeId) as bookTypeName
    from book_info
    limit #{begin}, #{size}
  </select>
  <select id="selectCount" resultType="int">
    select count(*) from book_info
  </select>
  <select id="selectCountBySearch" resultType="int">
    select count(*) from book_info
    <where>
      <if test="bookName != null and bookName != '' ">
        and bookName like concat('%',#{bookName},'%')
      </if>
      <if test="bookAuthor != null and bookAuthor != '' ">
        and bookAuthor like concat('%',#{bookAuthor},'%')
      </if>
      <if test="bookTypeId != null and bookTypeId != '' ">
        and bookTypeId = #{bookTypeId}
      </if>
    </where>
  </select>
  <select id="selectBySearch" resultMap="BaseResultMap">
    select bookId, bookName, bookAuthor,bookPrice, bookTypeId, bookDesc,isBorrowed, bookImg,
           (select bookTypeName from book_type where book_type.bookTypeId = book_info.bookTypeId) as bookTypeName
    from book_info
    <where>
      <if test="bookName != null and bookName != '' ">
        and bookName like concat('%',#{bookName},'%')
      </if>
      <if test="bookAuthor != null and bookAuthor != '' ">
        and bookAuthor like concat('%',#{bookAuthor},'%')
      </if>
      <if test="bookTypeId != null and bookTypeId != '' ">
        and bookTypeId = #{bookTypeId}
      </if>
    </where>
    limit #{begin}, #{size}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select bookId, bookName, bookAuthor,bookPrice, bookTypeId, bookDesc,isBorrowed, bookImg,
           (select bookTypeName from book_type where book_type.bookTypeId = book_info.bookTypeId) as bookTypeName
    from book_info
  </select>
  <select id="selectCountByType" resultType="int">
    select count(*) from book_info
    <where>
      <if test="bookTypeId != null and bookTypeId != '' ">
        and bookTypeId = #{bookTypeId}
      </if>
    </where>
  </select>
  <select id="selectByType" resultMap="BaseResultMap">
    select bookId, bookName, bookAuthor,bookPrice, bookTypeId, bookDesc,isBorrowed, bookImg,
    (select bookTypeName from book_type where book_type.bookTypeId = book_info.bookTypeId) as bookTypeName
    from book_info
    <where>
      <if test="bookTypeId != null and bookTypeId != '' ">
        and bookTypeId = #{bookTypeId}
      </if>
    </where>
    limit #{begin}, #{size}
  </select>
</mapper>

