{"remainingRequest":"C:\\Users\\陶闰喆\\Documents\\GitHub\\Librasphere\\BookManagerVue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\陶闰喆\\Documents\\GitHub\\Librasphere\\BookManagerVue\\src\\views\\booktype\\index.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\陶闰喆\\Documents\\GitHub\\Librasphere\\BookManagerVue\\src\\views\\booktype\\index.vue","mtime":1730904574339},{"path":"C:\\Users\\陶闰喆\\Documents\\GitHub\\Librasphere\\BookManagerVue\\node_modules\\babel-loader\\lib\\index.js","mtime":1730904560872},{"path":"C:\\Users\\陶闰喆\\Documents\\GitHub\\Librasphere\\BookManagerVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1730904561891},{"path":"C:\\Users\\陶闰喆\\Documents\\GitHub\\Librasphere\\BookManagerVue\\node_modules\\vue-loader\\lib\\index.js","mtime":1730904573452}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}